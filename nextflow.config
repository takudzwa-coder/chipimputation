manifest {
    name            = 'takudzwa-coder/chipimputation'
    author          = 'H3ABioNet'
    homePage        = 'https://github.com/takudzwa-coder/chipimputation'
    description     = 'chipimputation'
    mainScript      = 'main.nf'
    nextflowVersion = '>=20.04.0'
    version         = '1.0'
}

// Global default params, used in configs

include { assets; docs } from './*'

params {

  // General options
  name = false
  version = '1.0'
  clusterOptions = false
  help = false
  plaintext_email = false
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  outDir = './output'
  tracedir = "${params.outDir}/pipeline_info"

  // TODO Pipeline's command line flags

  chromosomes = "ALL" // Impute all chromosomes by default
  project_name = "h3achipimputation" // Default project name

  // Minimac4 option
  minRatio = '0.01'
  chunk = ''
}

process.container = 'quay.io/h3abionet_org/imputation_tools' // Container slug. Stable releases should specify release tag!

// Load base.config by default for all pipelines
includeConfig './conf/base.config'

profiles {

 // standard { includeConfig './conf/base.config' }
  test { includeConfig './conf/test.config' }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  conda { process.conda = "./environment.yml" }
  docker {
    docker.enabled = true
    docker.runOptions = '-u root'
    docker.fixOwnership = true
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  slurm {
    includeConfig './conf/base.config'
    process.executor = 'slurm'
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}


